<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

    <title></title>
    <link rel="stylesheet" href="dist/reveal.css" />
    <link rel="stylesheet" href="dist/theme/moon.css" id="theme" />
    <link rel="stylesheet" href="plugin/highlight/zenburn.css" />
	<link rel="stylesheet" href="css/layout.css" />
	<link rel="stylesheet" href="plugin/customcontrols/style.css">
  <script src="https://cdn.tailwindcss.com"></script>


    <script defer src="dist/fontawesome/all.min.js"></script>

	<script type="text/javascript">
		var forgetPop = true;
		function onPopState(event) {
			if(forgetPop){
				forgetPop = false;
			} else {
				parent.postMessage(event.target.location.href, "app://obsidian.md");
			}
        }
		window.onpopstate = onPopState;
		window.onmessage = event => {
			if(event.data == "reload"){
				window.document.location.reload();
			}
			forgetPop = true;
		}

		function fitElements(){
			const itemsToFit = document.getElementsByClassName('fitText');
			for (const item in itemsToFit) {
				if (Object.hasOwnProperty.call(itemsToFit, item)) {
					var element = itemsToFit[item];
					fitElement(element,1, 1000);
					element.classList.remove('fitText');
				}
			}
		}

		function fitElement(element, start, end){

			let size = (end + start) / 2;
			element.style.fontSize = `${size}px`;

			if(Math.abs(start - end) < 1){
				while(element.scrollHeight > element.offsetHeight){
					size--;
					element.style.fontSize = `${size}px`;
				}
				return;
			}

			if(element.scrollHeight > element.offsetHeight){
				fitElement(element, start, size);
			} else {
				fitElement(element, size, end);
			}		
		}


		document.onreadystatechange = () => {
			fitElements();
			if (document.readyState === 'complete') {
				if (window.location.href.indexOf("?export") != -1){
					parent.postMessage(event.target.location.href, "app://obsidian.md");
				}
				if (window.location.href.indexOf("print-pdf") != -1){
					let stateCheck = setInterval(() => {
						clearInterval(stateCheck);
						window.print();
					}, 250);
				}
			}
	};


        </script>
  </head>
  <script>
    const crypto = require('crypto');

    function getNum() {
      return new Promise((resolve, reject) => {
        const readline = require('readline').createInterface({
          input: process.stdin,
          output: process.stdout
        });

        readline.question('Enter a number: ', (num_input) => {
          const num = parseInt(num_input);
          if (num % 2 === 1) {
            reject(new Error('NumberIsOdd'));
          } else {
            resolve(num);
          }
          readline.close();
        });
      });
    }

    function keyGen(length) {
      const half_len = Math.floor(length / 2);
      const zero_list = Array.from({ length: half_len }, (_, i) => i+1);
      const zero_positions = new Map();
      let valid_spot = 0;
      for (let i = 0; i < half_len-1; i++) {
        const index = Math.floor(Math.random() * (half_len - 1 - valid_spot)) + valid_spot;
        for (let j = half_len-2; j >= index; j--) {
          if (zero_list[j] != 1) {
            zero_list[j] -= 1;
          } else {
            valid_spot = j + 1;
            break;
          }
        }
        zero_positions.set(index, zero_positions.get(index) + 1 || 1);
      }
      var list_ptr = [];
      for (let i = 0; i < half_len; i++) {
        list_ptr.push(1);
        const value = zero_positions.get(i) || 0;
        list_ptr.push(...Array(value).fill(0));
      }
      list_ptr.push(0);
      return list_ptr;
    }

    function getBalance(range) {
      let position = 0;
      for (const value of range) {
        if (value == 1) {
          position += 1;
        } else {
          position -= 1;
        }
        if (position < 0) {
          return false;
        }
      }
      return true;
    }
    function testDyckWord() {
      for (let i = 0; i < 100; i++) {
        const length = Math.floor(Math.random() * 99 + 2) * 2;
        const value = keyGen(length);
        if(!getBalance(value)){
          console.log(value.join(''));
        }
        console.assert(getBalance(value), 'Test failed for length: ' + length);
      }
      button = document.getElementById("dyckgen");
      button.addEventListener("click", function(){
        document.getElementById("catalan").innerHTML = keyGen(10);
      });
    }
    
  </script>
  <body>
    <div class="reveal">
      <div class="slides"><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

# Catalan Numbers
Sebastian Benatar
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

### Research Questions
How are Catalan numbers related to cryptography? How can Catalan numbers be used to cipher a message?
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

# History
<div class="flex flex-row">
<div class="flex flex-col">
<span>- The first recorded usage by Mingantu through his work on trigonometric identities and power series.</span>
<span>- Named after Eug√®ne Charles Catalan</span>
</div>
<img src="Pasted image 20240607222411.png" alt="" style="object-fit: scale-down">
</div>
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

## Lattice paths
<img src="lattice-path.png" alt="" style="object-fit: scale-down">

<em>Lattice paths are paths that travel through a mxn grid</em>
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

## Monotonic lattice path
<img src="Math/monotonic-paths.svg" alt="" style="object-fit: scale-down">

`${2n\choose n}-{2n\choose n-1}$`
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

#### Getting simpler formula
$
\frac{2n}{n!n!}-\frac{2n}{(n+1)!(n-1)!}
$

$
\frac{2n}{n!}\left(\frac{1}{n!}-\frac{1}{(n+1)(n-1)!}\right)
$

$
\frac{2n}{n!}\left(\frac{n+1}{n!(n+1)}-\frac{n}{n!(n+1)}\right)
$

$
\frac{2n}{n!}\left(\frac{1}{n!(n+1)}\right)
$

`$\binom{2n}{n} - \binom{2n}{n-1} = \binom{2n}{n} \frac{1}{n+1}$`
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

### Recursive formula
`$c_{n-1} = \frac{(2n-2)!}{(n-1)!(n-1)!} \frac{1}{n}$`

`$\frac{c_{n-1}*(2n-1)*2n*n}{n*n(n+1)}$`

`$\frac{c_{n-1}*(2n-1)*2}{(n+1)}$`
Therefore, `$\frac{{4n-2}}{{n+1}} \cdot c_{n-1} = c_n$`
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

## Dyck words
((()())())

XXXYXYYXYY

1110100100
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

## Dyck word generation
<button id="dyckgen" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full">Generate</button>
<p id="catalan"></p>
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

## Ciphering
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

## Applications
- Sending secret messages to friends
- Cipher using Catalan numbers in conjunction with other methods
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

## Extension
- interpreting Feynman diagrams
- Binary trees in Linguistics
- Cryptocurrency hash rate

<img src="Pasted image 20240609220829.png" alt="" style="object-fit: scale-down">
</div></script></section><section  data-markdown><script type="text/template"><!-- .slide: class="drop" -->
<div class="" style="position: absolute; left: 0px; top: 0px; height: 700px; width: 960px; min-height: 700px; display: flex; flex-direction: column; align-items: center; justify-content: center" absolute="true">

## Reference List
</div></script></section></div>
    </div>

    <script src="dist/reveal.js"></script>

    <script src="plugin/markdown/markdown.js"></script>
    <script src="plugin/highlight/highlight.js"></script>
    <script src="plugin/zoom/zoom.js"></script>
    <script src="plugin/notes/notes.js"></script>
    <script src="plugin/math/math.js"></script>
	<script src="plugin/mermaid/mermaid.js"></script>
	<script src="plugin/chart/chart.min.js"></script>
	<script src="plugin/chart/plugin.js"></script>
	<script src="plugin/customcontrols/plugin.js"></script>

    <script>
      function extend() {
        var target = {};
        for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (source.hasOwnProperty(key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      }

	  function isLight(color) {
		let hex = color.replace('#', '');

		// convert #fff => #ffffff
		if(hex.length == 3){
			hex = `${hex[0]}${hex[0]}${hex[1]}${hex[1]}${hex[2]}${hex[2]}`;
		}

		const c_r = parseInt(hex.substr(0, 2), 16);
		const c_g = parseInt(hex.substr(2, 2), 16);
		const c_b = parseInt(hex.substr(4, 2), 16);
		const brightness = ((c_r * 299) + (c_g * 587) + (c_b * 114)) / 1000;
		return brightness > 155;
	}

	var bgColor = getComputedStyle(document.documentElement).getPropertyValue('--r-background-color').trim();
	var isLight = isLight(bgColor);

	if(isLight){
		document.body.classList.add('has-light-background');
	} else {
		document.body.classList.add('has-dark-background');
	}

      // default options to init reveal.js
      var defaultOptions = {
        controls: true,
        progress: true,
        history: true,
        center: true,
        transition: 'default', // none/fade/slide/convex/concave/zoom
        plugins: [
          RevealMarkdown,
          RevealHighlight,
          RevealZoom,
          RevealNotes,
          RevealMath.MathJax3,
		  RevealMermaid,
		  RevealChart,
		  RevealCustomControls,
        ],


    	allottedTime: 120 * 1000,

		mathjax3: {
			mathjax: 'plugin/math/mathjax/tex-mml-chtml.js',
		},
		markdown: {
		  gfm: true,
		  mangle: true,
		  pedantic: false,
		  smartLists: false,
		  smartypants: false,
		},

		mermaid: {
			theme: isLight ? 'default' : 'dark',
		},

		customcontrols: {
			controls: [
			]
		},
      };

      // options from URL query string
      var queryOptions = Reveal().getQueryHash() || {};

      var options = extend(defaultOptions, {"width":960,"height":700,"margin":0.04,"controls":true,"progress":true,"slideNumber":false,"transition":"slide","transitionSpeed":"default"}, queryOptions);
    </script>

    <script>
      Reveal.initialize(options);
    </script>
  </body>

  <!-- created with Advanced Slides -->
</html>
